
//*********************qi guai ban ben////////////////////////
//        var dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
//        var queryExpression = AWSDynamoDBScanExpression()
//
//        let temp = dynamoDbObjectMapper.scan(Posts.self, expression: queryExpression)
//        let real = temp.result
//        for news in (real?.items)! {
//                    posts.append(news as! Posts)
//                }

///////////////////////////////////////////////////////





/////////////chat//////////
task.continueWith(block: { (task:AWSTask<AnyObject>!) -> Any? in
if let error = task.error as? NSError {
print("The request failed. Error: \(error)")
} else if let resultBook = task.result as? ChattingList {
self.p._user1 = resultBook._user1
self.p._user2 = resultBook._user2

if self.p._chattingText != nil{

if (self.p._chattingText?.count)! < (resultBook._chattingText?.count)!
{pull_down = 1


for a in 0...(resultBook._chattingText?.count)! - 1
{
let l = resultBook._chattingText![a]
if !self.p._chattingText!.contains(l)
{
let indexPath = IndexPath(row: a, section: 0)
self.new_rows.append(indexPath)

if self.p._chattingText != nil
{self.p._chattingText!.append(l)}
else
{self.p._chattingText = [l]}
if self.p._chattingTime != nil
{ self.p._chattingTime!.append(resultBook._chattingTime![a])}
else
{self.p._chattingTime = [resultBook._chattingTime![a]]}
if self.p._srList != nil
{ self.p._srList!.append(resultBook._srList![a])}
else
{self.p._srList = [resultBook._srList![a]]}

DispatchQueue.main.async(execute: {
//                    self.tableView.reloadData()
self.user_index = 1
self.tableView.beginUpdates()
self.tableView.insertRows(at: self.new_rows, with: .automatic)
self.tableView.endUpdates()
})

}
}



//self.p = resultBook




}}
}
return nil
})
task.waitUntilFinished()



//load some posts:
//********************
//        let queryExpression = AWSDynamoDBQueryExpression()
//        queryExpression.keyConditionExpression = "#postId > :postId"
//        queryExpression.expressionAttributeNames = [
//            "#postId": "post_id",
//        ]
//        queryExpression.expressionAttributeValues = [
//            ":postId": "0",
//        ]
//        dynamoDbObjectMapper.query(Posts.self, expression: queryExpression) { (output: AWSDynamoDBPaginatedOutput?, error: Error?) in
//            if error != nil {
//                print("The request failed. Error: \(String(describing: error))")
//            }
//            if output != nil {
//                DispatchQueue.main.async(execute: {
//                    for news in output!.items {
//                        self.posts.append(news as! Posts)
//                    }
//                })
//            }
//        }
//**********************





//var temp:Posts = dynamoDbObjectMapper.load(Posts.self, hashKey: "Potaty", rangeKey: 5).result as! Posts
//while(posts.count == 0){self.tableView.reloadData()}
// load one post
//***********
//        dynamoDbObjectMapper.load(Posts.self, hashKey: "Potaty", rangeKey: 5).continueWith(executor: AWSExecutor.mainThread(), block: { (task:AWSTask!) -> AnyObject! in
//            if let error = task.error as NSError? {
//                print("Amazon DynamoDB Read Error: \(error)")
//            }else if let resultBook = task.result as? Posts {
//        DispatchQueue.main.async(execute: {
//            self.posts.append(resultBook)
//        })
//            }
//            return nil
//        })
//**************


//******************test**********************//
//        dynamoDbObjectMapper.scan(Posts.self, expression: queryExpression).continueWith(executor: AWSExecutor.mainThread(), block: { (task:AWSTask!) -> AnyObject? in
//            if let paginatedOutput = task.result{
//                        for news in paginatedOutput.items {
//                            posts.append(news as! Posts)
//                        }
//            }
//            return nil
//        })

//****************************************







// ****************************supposed to be storing local data****************************//
//        var userDefaults = UserDefaults.standard
//        let decoded  = userDefaults.object(forKey: "posts") as! Data
//        let decodedTeams = NSKeyedUnarchiver.unarchiveObject(with: decoded) as! [Posts]
//        print(decodedTeams.count)\
//********************************************************************************************







////////////////////  weird fuk//////////////////////////
//        var dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
//        var queryExpression = AWSDynamoDBScanExpression()
//
//        let temp = dynamoDbObjectMapper.scan(Posts.self, expression: queryExpression)
//        let real = temp.result
//        for news in (real?.items)! {
//            posts.append(news as! Posts)
//        }
/////////////////////////////////////////////////////////////





//
//
//func query_ (id:Int) -> Posts{
//    let queryExpression = AWSDynamoDBQueryExpression()
//    queryExpression.keyConditionExpression = "#post_id = :post_id"
//    //print("232")
//    queryExpression.expressionAttributeNames = [
//        "#post_id": "post_id",
//    ]
//    queryExpression.expressionAttributeValues = [
//        ":post_id": String(id)
//    ]
//    //print("239")
//    // 2) Make the query
//
//    let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
//    var temp:Posts = Posts()
//    //print("244")
//    dynamoDbObjectMapper.query(Posts.self, expression: queryExpression) { (output: AWSDynamoDBPaginatedOutput?, error: Error?) in
//        if error != nil {
//            print("The request failed. Error: \(String(describing: error))")
//        }
//       // print("248")
//        if output != nil {
//            for news in output!.items {
//                temp = news as! Posts
//            }
//        }
//    }
//    return temp
//
//}

//@objcMembers
//class TotalChance: AWSDynamoDBObjectModel, AWSDynamoDBModeling {
//
//    var _totChanceId: String?
//    var _totC: String?
//
//    class func dynamoDBTableName() -> String {
//
//        return "chance-mobilehub-653619147-TotalChance"
//    }
//
//    class func hashKeyAttribute() -> String {
//
//        return "_totChanceId"
//    }
//
//    override class func jsonKeyPathsByPropertyKey() -> [AnyHashable: Any] {
//        return [
//            "_totChanceId" : "TotChanceId",
//            "_totC" : "totC",
//        ]
//    }
//}




//    func update(type:String,content:Any) {
//        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
//        let new = self
//        // Create data object using data models you downloaded from Mobile Hub
//        switch type {
//        case "id":
//            new._postId = content as? String
//        case "time":
//            new._time = content as? NSNumber
//        case "comments":
//            new._comments = content as? NSNumber
//        case "like":
//            new._liked = content as? NSNumber
//        case "pictures":
//            new._pictures = content as? Set<String>
//        case "profile_picture":
//            new._profilePicture = content as? String
//        case "shared":
//            new._shared = content as? NSNumber
//        case "tag":
//            new._tag = content as? NSNumber
//        case "title":
//            new._title = content as? String
//        case "username":
//            new._username = content as? String
//        case "text":
//            new._text = content as? String
//        default:
//            print("heihei something is wrong with the type input")
//        }
//
//        dynamoDbObjectMapper.save(new, completionHandler: {
//            (error: Error?) -> Void in
//
//            if let error = error {
//                print("Amazon DynamoDB Save Error: \(error)")
//                return
//            }
//            print("An item was updated.")
//        })
//    }

//    func read (id:String, time:NSNumber) -> Posts? {
//        var temp:Posts = Posts()
//        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
//        dynamoDbObjectMapper.load(Posts.self, hashKey: id, rangeKey: time).continueWith(executor: AWSExecutor.mainThread(), block: { (task:AWSTask!) -> AnyObject! in
//            if let error = task.error as NSError? {
//                print("Amazon DynamoDB Read Error: \(error)")
//            }else if let resultBook = task.result as? Posts {
//                //print()
//                temp = resultBook
//            }
//            return nil
//        })
//        print(temp._text)
//        return temp
//    }
//
//
//    func read_string(id:String, time:NSNumber, type:String) -> String{
//        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
//        //let dynamoDBObjectMapper:AWSDynamoDBObjectMapper = AWSDynamoDBObjectMapper(forKey: "USEast1DynamoDBObjectMapper")
//        //let username: String? = AWSCognitoUserPoolsSignInProvider.sharedInstance().getUserPool().currentUser()?.username
//        var temp = ""
//        dynamoDbObjectMapper.load(Posts.self, hashKey: "Potaty", rangeKey: 5).continueWith(executor: AWSExecutor.mainThread(), block: { (task:AWSTask!) -> AnyObject! in
//            if let error = task.error as NSError? {
//                print("Amazon DynamoDB Read Error: \(error)")
//                return "error" as AnyObject
//            }else if let resultBook = task.result as? Posts{
//            print("An item was read.")
//
//            switch type {
//            case "id":
//                temp = (resultBook._postId)!
//            case "profile_picture":
//                temp = (resultBook._profilePicture)!
//            case "title":
//                temp = (resultBook._title)!
//            case "username":
//                temp = (resultBook._username)!
//            case "text":
//                temp = (resultBook._text)!//print(resultBook._text)
//            default:
//                print("heihei something is wrong with the type input")
//            }
//            };return nil
//        })
//        //print("temp" + ("\(temp)"))
//        return temp
//    }
//
//    func read_number(type:String) -> Int{
//
//        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
//        //let username: String? = AWSCognitoUserPoolsSignInProvider.sharedInstance().getUserPool().currentUser()?.username
//        var temp = 0
//        dynamoDbObjectMapper.load(Posts.self, hashKey: self._postId, rangeKey: "", completionHandler: { (objectModel: AWSDynamoDBObjectModel?, error: Error?) -> Void in
//            if let error = error {
//                print("Amazon DynamoDB Read Error: \(error)")
//                return
//            }
//            print("An item was read.")
//            //time comments liked shared tag
//            switch type {
//            case "time":
//                temp = (objectModel?.dictionaryValue["_time"] as? Int)!
//            case "comments":
//                temp = (objectModel?.dictionaryValue["_comments"] as? Int)!
//            case "liked":
//                temp = (objectModel?.dictionaryValue["_liked"] as? Int)!
//            case "shared":
//                temp = (objectModel?.dictionaryValue["_shared"] as? Int)!
//            case "tag":
//                temp = (objectModel?.dictionaryValue["_tag"] as? Int)!
//            default:
//                print("heihei something is wrong with the type input")
//            }
//
//        })
//        return temp
//    }
//
//    func read_string_set(type:String) -> Set<String>{
//
//        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
//        //let username: String? = AWSCognitoUserPoolsSignInProvider.sharedInstance().getUserPool().currentUser()?.username
//        var temp:Set<String> = []
//        dynamoDbObjectMapper.load(Posts.self, hashKey: self._postId, rangeKey: "", completionHandler: { (objectModel: AWSDynamoDBObjectModel?, error: Error?) -> Void in
//            if let error = error {
//                print("Amazon DynamoDB Read Error: \(error)")
//                return
//            }
//            print("An item was read.")
//            //time comments liked shared tag
//            temp = (objectModel?.dictionaryValue["_pictures"] as? Set<String>)!
//
//        })
//        return temp
//    }
//
//    func query (id:String) -> Posts {
//        let queryExpression = AWSDynamoDBQueryExpression()
//        queryExpression.keyConditionExpression = "#postId = :postId"
//        //print("232")
//        queryExpression.expressionAttributeNames = [
//            "#postId": "postId",
//        ]
//        queryExpression.expressionAttributeValues = [
//            ":postId": id,
//        ]
//       // print("239")
//        // 2) Make the query
//        //let dynamoDBObjectMapper:AWSDynamoDBObjectMapper = AWSDynamoDBObjectMapper(forKey: "USEast1DynamoDBObjectMapper")
//        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()
//        var temp:Posts = Posts()
//      //  print("244")
//        dynamoDbObjectMapper.query(Posts.self, expression: queryExpression) { (output: AWSDynamoDBPaginatedOutput?, error: Error?) in
//       //     print("250")
//            if error != nil {
//                print("The request failed. Error: \(String(describing: error))")
//            }
//       //     print("248")
//            if output != nil {
//                for news in output!.items {
//                    temp = news as! Posts
//                }
//            }
//        }
//        return temp
//
//    }
//
//






////////////////////////////////////////////////possible placeholder for textview////
//
//        placeholderLabel = UILabel()
//        placeholderLabel.text = "内容"
//        placeholderLabel.font = UIFont.italicSystemFont(ofSize: (content.font?.pointSize)!)
//        placeholderLabel.sizeToFit()
//        content.addSubview(placeholderLabel)
//        placeholderLabel.frame.origin = CGPoint(x: 5, y: (content.font?.pointSize)! / 2)
//        placeholderLabel.textColor = UIColor.lightGray
//        placeholderLabel.isHidden = !content.text.isEmpty
///////////////////////////////////////////////////////////////



